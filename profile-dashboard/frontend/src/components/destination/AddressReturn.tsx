import React, {useEffect, useState} from "react";
import Button from "antd/lib/button";
import Card from "antd/lib/card";
import Row from "antd/lib/row";
import Col from "antd/lib/col";
import Select from "antd/lib/select";
import CustomKeplerMap from "@src/components/common/CustomKeplerMap";
import {addDataToMap, updateMap} from "kepler.gl/actions";
import {store} from "@src/index";
import {Input, Radio, Space} from "antd";
import {get} from "@src/api";
import {NotifyError} from "@src/components/common/Notification";
import {addrList} from "@src/components/destination/const-value";
import {processCsvData} from "kepler.gl/processors";
import {useDispatch} from "react-redux";


interface Props {

}

interface Data {
    address: string;
    h3: string;
    sd: string;
}

const AddressReturn = (props: Props): React.ReactElement => {
    const [keplerBoundaryData, setKeplerBoundaryData] = useState("li_geo_boundary.address,li_geo_boundary.geometry,li_geo_boundary.sd\n서울특별시 종로구 신교동,\"POLYGON ((126.97031416603146 37.584176324207235, 126.97033437429 37.58406962580106, 126.97035866764314 37.58394039481275, 126.97034524945433 37.583864086781205, 126.97033554632812 37.58381115130108, 126.97032865534428 37.583774830741596, 126.97030872103922 37.58365938215648, 126.97030395523382 37.58363094578274, 126.97024957363288 37.58337077171772, 126.97023633279318 37.583304041193614, 126.97023157647408 37.58328010974733, 126.97020456053716 37.583151991395596, 126.97019768147071 37.58311454459515, 126.97019573418504 37.58311454407845, 126.97015947318799 37.58311086743856, 126.97013258538695 37.583109454754734, 126.96987908539514 37.58311389201245, 126.96974534117426 37.58312371287612, 126.96974981762361 37.58300658590809, 126.96967109888654 37.58300881716201, 126.969654115209 37.58301247058181, 126.96964721986555 37.5830138832683, 126.96963536550845 37.583015844216526, 126.96961307111935 37.5830217576707, 126.96952320775641 37.58303411289539, 126.9695161315088 37.58303495790404, 126.96942961913005 37.583047602281354, 126.96940219756381 37.58305013560449, 126.9692941104043 37.583053764151344, 126.96924281317503 37.583053470831466, 126.96917576870591 37.58305120001667, 126.96905990799834 37.583044969432784, 126.96895359175116 37.583037624145945, 126.96893784366067 37.58303761980058, 126.96887063283654 37.583027465139516, 126.96883419338845 37.58301787757534, 126.96881969324265 37.583011963091884, 126.96880695825385 37.58300830156067, 126.96878714800334 37.58300322351857, 126.96874203032651 37.58300743662411, 126.96872647211403 37.58301334277107, 126.96869568548207 37.583021785463124, 126.96864419488105 37.58304935932468, 126.96861871561971 37.58306314632112, 126.96853732968778 37.5831059294527, 126.96848477562774 37.583131529788, 126.96846867319164 37.58313912960211, 126.96840975456256 37.58316896275562, 126.96836534190058 37.583191474938886, 126.96830659126167 37.583225245396285, 126.96823581468286 37.58326464359611, 126.96817106318254 37.58329925021042, 126.96811514273654 37.58333302137135, 126.9680631189653 37.583362009374866, 126.96805975560694 37.58336398158074, 126.96802206780575 37.58338620722446, 126.9679619122357 37.58342167096389, 126.96790582228783 37.58345431574437, 126.96787290403208 37.5834692266928, 126.96783787971147 37.58348470465218, 126.96776321046394 37.583518749600046, 126.96775931561531 37.58351931610735, 126.96774817654355 37.58351649283549, 126.96768325557616 37.58349930145457, 126.96762577260029 37.58348267078493, 126.96745650335886 37.583436734853414, 126.96735886887252 37.583407703905316, 126.96735126161714 37.583406007850265, 126.96726000068216 37.58337810489724, 126.96722814112366 37.58340484591792, 126.9672237240716 37.58340850263747, 126.96719912413859 37.58342961459728, 126.96715790057495 37.58343410753469, 126.96709757728455 37.58343944181671, 126.96709085155123 37.58344112469897, 126.96705316770141 37.583454069879636, 126.9670368958765 37.58346026391056, 126.96701866569455 37.58346588974582, 126.96701248312618 37.58346814040344, 126.9670068092464 37.5834720760531, 126.96696700252359 37.58349740914123, 126.96695443047152 37.583508658774306, 126.96691267354983 37.58354018104583, 126.966903647321 37.58354665648777, 126.96684453420055 37.58360323006098, 126.96682347955475 37.58362040567493, 126.9668018927926 37.583637572118676, 126.96673305525931 37.58369216961591, 126.96670757254037 37.58371215497975, 126.96670119616313 37.58371722564952, 126.96668614911697 37.583743124553216, 126.96665640464994 37.58379773353359, 126.96664950392478 37.58381040836594, 126.96660386089658 37.58379884423665, 126.96660138174207 37.583798284892154, 126.96655840929107 37.58378954162082, 126.96650302276575 37.58381711339067, 126.96649151797202 37.58382162391646, 126.96645914165023 37.58383878709494, 126.96641755706885 37.583864110458265, 126.96641650376785 37.58386495707172, 126.96637278964803 37.583892532250395, 126.96634075814 37.58392265167472, 126.96625528040197 37.583994705035266, 126.96625351397064 37.58399527212866, 126.96613919882297 37.58406984855588, 126.96604859805528 37.5841292323694, 126.96600028520662 37.58416075234464, 126.96599214252554 37.58418975262605, 126.96595457007517 37.584324321554185, 126.96591298263695 37.58435471728639, 126.965866620973 37.58440144643323, 126.96568874267113 37.584599321118304, 126.96568146133127 37.584649720047736, 126.9653843517301 37.58485065739884, 126.96537107930182 37.584857699043184, 126.96535957414896 37.58486247975338, 126.96535073013739 37.58486613504578, 126.96533268185844 37.584869228905255, 126.9651046364056 37.58490041397174, 126.96508110689982 37.58490659648257, 126.96500410077535 37.58501413235348, 126.9650441613212 37.585585423660554, 126.96514005881518 37.585558423686436, 126.96517968237049 37.58556406705046, 126.96525627283557 37.58556718999355, 126.9653452609524 37.58556974906578, 126.96541619107417 37.58557174393847, 126.96547617065855 37.58555514809369, 126.9656171796639 37.58551633155665, 126.96565274654216 37.58550564766981, 126.965743318167 37.58551130631345, 126.96584909420501 37.58554230519665, 126.96593611251367 37.58556824380335, 126.96602668009531 37.585582623768424, 126.96608682121658 37.58560713963241, 126.96615225952196 37.585634747433275, 126.96616128872716 37.58562264990227, 126.96630792339558 37.58565816553268, 126.96638789558156 37.58564495388239, 126.96641850081451 37.58563989944796, 126.96646113059947 37.58563315472453, 126.96646342905777 37.5856328761016, 126.96662088196966 37.58560757803136, 126.96665591439222 37.58560167791767, 126.96668864835299 37.58559605642096, 126.96670934683797 37.58559127829314, 126.96682255702801 37.58560820510156, 126.96683918758602 37.58561074175788, 126.96685880132209 37.58565016563592, 126.96693731962392 37.585720294348484, 126.96700575134345 37.58576367880918, 126.96701495326269 37.58576959196423, 126.96703812670921 37.58577467128392, 126.96705475679236 37.58577833414157, 126.96707297219103 37.58578143884846, 126.9670913683546 37.585785381521795, 126.96715434375413 37.5857780748593, 126.9672663361128 37.58576037601356, 126.96732241815451 37.585749409259705, 126.9674406060396 37.58572607187376, 126.96751489600165 37.585734544541275, 126.96754302945888 37.585737363716845, 126.96763359971989 37.585746967226235, 126.96776343220058 37.5857607985121, 126.967848873985 37.58576983276881, 126.96789221192479 37.58577435004973, 126.96804859281187 37.58579128797178, 126.96814976397282 37.58581834617987, 126.96822972045885 37.58584004646648, 126.96829551523822 37.58585752610177, 126.96832205026674 37.585865128874815, 126.96833408401183 37.58586823164851, 126.9683436279515 37.585869081257506, 126.96839776751888 37.58587247515607, 126.96845489568405 37.58587671679333, 126.96848834041863 37.585876726156336, 126.96851292052129 37.58587588610524, 126.96855857119898 37.5858736463968, 126.96862650388469 37.58587000734409, 126.9686801027401 37.585867202182236, 126.9686976178797 37.58586664844243, 126.9687489182731 37.58586412191569, 126.96888814606794 37.585857123787164, 126.9691366998666 37.585844803681475, 126.96914890505388 37.58584424841792, 126.9691487362016 37.585841995907856, 126.9691254031568 37.58539487542783, 126.96910641895902 37.585102049894424, 126.96916710001618 37.58510995016457, 126.96959870190157 37.58517510080323, 126.9696191050945 37.58503912055743, 126.96964448536787 37.584860335819975, 126.9696459069406 37.58484541588112, 126.9696407991069 37.58479641890091, 126.96962348792307 37.58471757797746, 126.96965338893644 37.584716459820626, 126.96971530823176 37.5847139447491, 126.96971512528738 37.58471817032272, 126.9697462565326 37.58472606233072, 126.96988760987684 37.584720748436894, 126.96996419136006 37.58474357288033, 126.96999213222735 37.5847728623806, 126.97003953159235 37.58478357874, 126.9700779192677 37.58479344575392, 126.97010537989995 37.584699408178714, 126.97018154578501 37.584471370919374, 126.97023007391543 37.584327505379036, 126.97031416603146 37.584176324207235))\",Seoul\n");
    const [fetchData, setFetchData] = useState(false);
    const [addrSelectData, setAddrSelectData] = useState(null);
    const [parameterUrl, setParameterUrl] = useState(null)
    const [buttonDisabled, setButtonDisabled] = useState(true);
    const [radioValue, setValue] = useState(1);
    const [lnValue, setLnValue] = useState(null);
    const [ltValue, setLtValue] = useState(null);

    useEffect(() => {

        store.dispatch(updateMap({
            latitude: 37.5658, longitude: 126.9889, // 캐롯 좌표
        }));

        store.dispatch(addDataToMap({
            datasets: {
                info: {
                    label: 'Boundary Data',
                    id: 'boundary_data',
                },
                data: processCsvData(keplerBoundaryData),
            },
        }));

    }, [keplerBoundaryData]);

    useEffect(() => {
        if (fetchData) {
            addrDataFetch();
            setFetchData(false);
            console.log(keplerBoundaryData);
        }
    }, [fetchData]);

    const addrDataFetch = () => {
        get<Data[]>(`/api/location/address/?${parameterUrl}`)
            .then((jsonData) => {
                const formattedData = "li_geo_boundary.address,li_geo_boundary.geometry,li_geo_boundary.sd\n" + formatData(jsonData)
                setKeplerBoundaryData(formattedData);
            })
            .catch((error) => {
                NotifyError(error)
            })
            .finally(() => {

            });
    };

    const formatData = (data: Data[]): string => {
        return data.map((item) => {
            return `${item.address},"${item.h3}",${item.sd}`;
        }).join('\n');
    };

    const handleSelectChange = (value: string, option: { value: string; label: string; } | {
        value: string;
        label: string;
    }[]) => {
        console.log(value);
        setAddrSelectData(value);
        setLnValue(null);
        setLtValue(null);
        setButtonDisabled(false);
    };

    const handleClickData = () => {
        const queryParams: Record<string, string | null> = {
            sd: addrSelectData,
            ln: lnValue,
            lt: ltValue,
        };

        const queryString = Object.entries(queryParams)
            .map(([key, value]) => `${key}=${value}`)
            .join('&');

        console.log(queryString);
        setParameterUrl(queryString);
        setFetchData(true);
    };

    const onRadioChange = (e) => {
        setButtonDisabled(true);
        setValue(e.target.value);
    };

    const handleLnValue = (e: React.ChangeEvent<HTMLInputElement>) => {
        const {value: inputValue} = e.target;
        setLnValue(inputValue)
        setAddrSelectData(null)
    };

    const handleLtValue = (e: React.ChangeEvent<HTMLInputElement>) => {
        const {value: inputValue} = e.target;
        setLtValue(inputValue)
        setAddrSelectData(null)
    };

    useEffect(() => {
        if (lnValue !== "" && ltValue !== "") {
            setButtonDisabled(false)
        } else if (lnValue === "" || ltValue === "") {
            setButtonDisabled(true)
        }
    }, [lnValue, ltValue]);

    return (
        <div>
            <Card>
                <Row>
                    <Col span={2}>
                        <h3>조회 조건 : </h3>
                    </Col>
                    <Col span={4}>
                        <Radio.Group onChange={onRadioChange} value={radioValue}>
                            <Space direction="vertical">
                                <Radio value={1}>시/도</Radio>
                                <Radio value={2}>좌표</Radio>
                            </Space>
                        </Radio.Group>
                    </Col>
                    <Col span={8}>
                        {radioValue === 1 && (
                            <Select
                                className={"h3-margin"}
                                showSearch
                                placeholder="시/도 선택"
                                optionFilterProp="children"
                                style={{
                                    width: '100%', float: 'left',
                                }}
                                onChange={handleSelectChange}
                                options={addrList}
                            >
                                {addrList.map((data, index) => {
                                    return (
                                        <Select.Option value={data.value} key={index}>
                                            {data.value}
                                        </Select.Option>
                                    );
                                })}
                            </Select>
                        )}
                        {radioValue === 2 && (
                            <Space direction="vertical" size={12} className={"h3-margin"}>
                                <Row>
                                    <Col span={2}>
                                        LN:
                                    </Col>
                                    <Col span={10}>
                                        <Input
                                            {...props}
                                            onChange={handleLnValue}
                                            placeholder="LN 좌표 입력"
                                            maxLength={16}
                                        />
                                    </Col>
                                    <Col span={2}>
                                         LT:
                                    </Col>
                                    <Col span={10}>
                                        <Input
                                            {...props}
                                            onChange={handleLtValue}
                                            placeholder="LT 좌표 입력"
                                            maxLength={16}
                                        />
                                    </Col>
                                </Row>
                            </Space>
                        )}
                    </Col>
                    <Col span={10}>
                        <Button
                            className={"h3-margin"}
                            type={'primary'}
                            style={{
                                float: "right",
                            }}
                            onClick={handleClickData}
                            disabled={buttonDisabled}
                        >
                            조회
                        </Button>
                    </Col>
                </Row>
            </Card>
            <Row>
                <Col span={24}>
                    <CustomKeplerMap
                        heightRatio={70}
                        id={"addrMap"}
                    />
                </Col>
            </Row>
        </div>
    )
};

export default AddressReturn;
